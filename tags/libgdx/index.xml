<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>libgdx | Norbert Bencz√∫r</title><link>https://nukesz.github.io/tags/libgdx/</link><atom:link href="https://nukesz.github.io/tags/libgdx/index.xml" rel="self" type="application/rss+xml"/><description>libgdx</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2025</copyright><lastBuildDate>Thu, 25 Oct 2018 15:46:05 +0200</lastBuildDate><image><url>https://nukesz.github.io/img/icon-192.png</url><title>libgdx</title><link>https://nukesz.github.io/tags/libgdx/</link></image><item><title>First Game</title><link>https://nukesz.github.io/post/first-game/</link><pubDate>Thu, 25 Oct 2018 15:46:05 +0200</pubDate><guid>https://nukesz.github.io/post/first-game/</guid><description>&lt;h1 id="create-the-first-game">Create the first game&lt;/h1>
&lt;p>After reading and following along the &lt;a href="../design-environment">design environment post&lt;/a> you should have a fully working environment and we can start creating our first game.
Using the gdx setup tool from libgdx it&amp;rsquo;s pretty straightforward to use. I recommend to read the official &lt;a href="https://github.com/libgdx/libgdx/wiki/Project-Setup-Gradle">documentation&lt;/a> how to run and configure the tool. However there are some trick and tips what you need to be aware of and do after the game has been created. Lets download the &lt;a href="https://libgdx.badlogicgames.com/nightlies/dist/gdx-setup.jar">jar&lt;/a> and run it.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">java -jar gdx-setup.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;p>I usually keep this jar inside of some &amp;ldquo;dev&amp;rdquo; folder and I don&amp;rsquo;t need to download it each time (it&amp;rsquo;s usually good practice to have a separated folder for these tools, especially because libgdx provides many).
Running the command use should see something like this:
&lt;img src="https://camo.githubusercontent.com/e4c5170e04b8583b42b81375067dfc3cc70d5a5c/687474703a2f2f692e696d6775722e636f6d2f6e49356c514b542e6a7067" alt="logo">&lt;/p>
&lt;p>On the UI fill the following things:&lt;/p>
&lt;ul>
&lt;li>Name: &lt;em>my-first-game&lt;/em>&lt;/li>
&lt;li>Package: &lt;em>com.yourname.game&lt;/em>&lt;/li>
&lt;li>Game class: &lt;em>MyFirstGame&lt;/em>&lt;/li>
&lt;li>Destination: &lt;em>~/games/my-first-game&lt;/em>&lt;/li>
&lt;li>Android SDK: &lt;em>~/dev/android-sdk&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Select Desktop and Android sub projects. Unfortunately we cannot use the html project with kotlin. For the web libgdx uses GWT which uses the java source code and not the bytecode itself. There are other projects like &lt;a href="http://www.teavm.org/">TeaVM&lt;/a> and maybe in the near future we can publish our games on the web, but right now it&amp;rsquo;s not possible out of the box. Our main target is android, so we can live and continue without the html support.&lt;/p>
&lt;p>On the advanced options tick &lt;code>Use Kotlin&lt;/code> checkbox and click Generate. Wait until the you see the &amp;ldquo;BUILD SUCCESSFUL&amp;rdquo; message and then the generated project can be imported into IntelliJ or eclipse. File / Open, and select your new gradle project. I usually check &amp;ldquo;use auto-import&amp;rdquo; and click &amp;ldquo;OK&amp;rdquo;. If everything went well you should see your synced projects on the left and under gradle projects on the right. Running the game can be done from either from IntelliJ or the command line.&lt;/p>
&lt;h2 id="using-ide">Using IDE&lt;/h2>
&lt;p>Open the DesktopLauncher class -&amp;gt; Right click -&amp;gt; Run &amp;hellip; You will get an error saying &amp;ldquo;Couldn&amp;rsquo;t load file: badlogic.jpg&amp;rdquo;, to solve it go to the run configurations and change the working directory to point to the android/assets folder. Try to run it again and you should see the Bad Logic Games logo.&lt;/p>
&lt;h2 id="using-command-line">Using command line&lt;/h2>
&lt;p>Using kotlin and libgdx from IntelliJ can generate unknown errors. &amp;ldquo;FileNotFound&amp;rdquo;, &amp;ldquo;ClassNotFound&amp;rdquo;, etc errors. Sometimes it&amp;rsquo;s hard to know what&amp;rsquo;s the problem so I prefer to run the games from command line. Just open a terminal, navigate to the game folder and run:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">./gradlew desktop:run
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, the same can be done from IntelliJ itself thanks to the gradle integration.&lt;/p>
&lt;h3 id="whats-next">What&amp;rsquo;s next&lt;/h3>
&lt;p>There a few things that you can and should do after this.&lt;/p>
&lt;ul>
&lt;li>Update dependencies. The setup still uses old libraries what you can upgrade (like kotlin, android plugin, ashley etc). Usually IntelliJ gives you a warning about a version mismatch or if a new version is available.&lt;/li>
&lt;li>Convert java code to kotlin. The &amp;ldquo;Use Kotlin&amp;rdquo; still generates java code, so you should convert all those classes into kotlin.&lt;/li>
&lt;li>IntelliJ has a nice &lt;a href="https://plugins.jetbrains.com/plugin/8509-libgdx-plugin">plugin&lt;/a> which I highly recommend to install and use. It gives you nice integration with the library.&lt;/li>
&lt;/ul>
&lt;h3 id="a-little-help">A little help&lt;/h3>
&lt;p>Of course using the official setup tool is recommended, but there are other setup tools available. One popular is &lt;a href="https://github.com/czyzby/gdx-setup">gdx-setup&lt;/a> by czyzby. Have a look, probably it can help you simplify the creation of games.&lt;/p></description></item><item><title>Design Environment for Game Development</title><link>https://nukesz.github.io/post/design-environment/</link><pubDate>Thu, 04 Oct 2018 16:02:29 +0200</pubDate><guid>https://nukesz.github.io/post/design-environment/</guid><description>&lt;h1 id="getting-started">Getting started&lt;/h1>
&lt;p>In this article I would like to show what is required to have an up and ready environment for
game development with the &lt;strong>libgdx&lt;/strong> framework. There is a getting started page on the libgdx&amp;rsquo;s website, but I wanted to gather all the required steps in one place. I will focus on what is needed for a 2D Game Developer who is targeting &lt;strong>Android&lt;/strong> mainly. I&amp;rsquo;m using Ubuntu 18.04 right now, but probably fellow windows, macOS users can follow along.&lt;/p>
&lt;p>We&amp;rsquo;re going to install and setup the following tools:&lt;/p>
&lt;ul>
&lt;li>java&lt;/li>
&lt;li>gradle&lt;/li>
&lt;li>android&lt;/li>
&lt;li>IntelliJ (skip if you&amp;rsquo;re using other IDE)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="java">JAVA&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo add-apt-repository ppa:webupd8team/java -y
sudo apt-get update
sudo apt-get install oracle-java8-installer
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Set Oracle Java 8 as default&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">sudo apt-get install oracle-java8-set-default
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verify the installation was successful&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ java -version
java version &lt;span style="color:#e6db74">&amp;#34;1.8.0_181&amp;#34;&lt;/span>
Java&lt;span style="color:#f92672">(&lt;/span>TM&lt;span style="color:#f92672">)&lt;/span> SE Runtime Environment &lt;span style="color:#f92672">(&lt;/span>build 1.8.0_181-b13&lt;span style="color:#f92672">)&lt;/span>
Java HotSpot&lt;span style="color:#f92672">(&lt;/span>TM&lt;span style="color:#f92672">)&lt;/span> 64-Bit Server VM &lt;span style="color:#f92672">(&lt;/span>build 25.181-b13, mixed mode&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="gradle">GRADLE&lt;/h2>
&lt;p>Usually projects use &lt;a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html">gradle wrapper&lt;/a> as it helps to reduce the cost to setup the build environment for the project. For example if you&amp;rsquo;re using docker (as you should! :) it helps to base you&amp;rsquo;re image on some existing java image only. You don&amp;rsquo;t have to worry about finding an image which has gradle also, just use your wrapper and you&amp;rsquo;re good to go[build].
But&amp;hellip; of course to create the wrapper you need to have gradle installed. Probably you can get away to copy-paste from another project. But I think it&amp;rsquo;s just convenient to have it in your terminal as you need.
I&amp;rsquo;ve copied the part from the &lt;a href="https://docs.gradle.org/current/userguide/installation.html">installation&lt;/a> page:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">mkdir /opt/gradle
unzip -d /opt/gradle gradle-4.10.2-bin.zip
ls /opt/gradle/gradle-4.10.2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verify installation&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">gradle -v
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Add it to the path. I recommend you to add this line to end of your ~/.bashrc so it will be loaded each time you open a new terminal.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">export PATH&lt;span style="color:#f92672">=&lt;/span>$PATH:/opt/gradle/gradle-4.10.2/bin
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="android">ANDROID&lt;/h2>
&lt;p>The market we aim is going to be the Android Marketplace, Google Play. In order to build, run and
test games, we need to have Android SDK on our machine, so let&amp;rsquo;s download it.
I prefer to use the command line tools only, so just go to &lt;a href="https://developer.android.com/studio/">android developer&lt;/a> page, scroll to the &amp;ldquo;Command line tools&amp;rdquo; only section and
download the linux zip.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">mkdir ~/dev/android-sdk
unzip sdk-tools-linux-*.zip
mv tools/ ~/dev/android-sdk/tools
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can repeat the same steps as we did for gradle to create the environment variables and add the binaries to the path.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">export ANDROID_HOME&lt;span style="color:#f92672">=&lt;/span>~/dev/android-sdk
export ANDROID_TOOLS&lt;span style="color:#f92672">=&lt;/span>$ANDROID_HOME/tools
export PATH&lt;span style="color:#f92672">=&lt;/span>$PATH:$ANDROID_TOOLS/bin
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verify the installation by running the &lt;code>sdkmanager&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ sdkmanager
Warning: File /home/nukesz/.android/repositories.cfg could not be loaded.
&lt;span style="color:#f92672">[=======================================]&lt;/span> 100% Computing updates...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can easily fix the warning by create an empty cfg file.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">touch ~/.android/repositories.cfg
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We have more thing to do and that is to install build-tools and platforms for android. I tend to pick a stable version and make sure all the games I develop are using that version. In my opinion it&amp;rsquo;s easier to maintain one version (and emulators to it) than getting weird errors because of different versions. So let&amp;rsquo;s install Android 28.&lt;/p>
&lt;h2 id="install-build-tools">Install Build Tools&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">yes | sdkmanager &lt;span style="color:#e6db74">&amp;#34;build-tools;28.0.1&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="install-platforms">Install platforms&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">yes | sdkmanager &lt;span style="color:#e6db74">&amp;#34;platforms;android-28&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>After these two commands, you should have a following structure in your &lt;em>ANDROID_HOME&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ ls $ANDROID_HOME
build-tools licenses platforms sdk-tools
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="intellij">INTELLIJ&lt;/h2>
&lt;p>I don&amp;rsquo;t want to waste my pen to write down what you can find on the awesome &lt;a href="https://www.jetbrains.com/">jetbrains&lt;/a> page, but I just want to highlight that instead of downloading all the cool products from jetbrains one-by-one, just download the &lt;a href="https://www.jetbrains.com/toolbox/app/">toolbox&lt;/a>. With that app you can download/upgrade/delete apps, and never have to worry about upgrading manually, linking bins etc.&lt;/p>
&lt;hr>
&lt;h2 id="summary">SUMMARY&lt;/h2>
&lt;p>With all these, you now have a fully functional environment and ready to jump into the game development business! In the next post we&amp;rsquo;re going to create our first game using libgdx.&lt;/p></description></item></channel></rss>