<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker | Norbert Bencz√∫r</title><link>https://nukesz.github.io/tags/docker/</link><atom:link href="https://nukesz.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><description>docker</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2025</copyright><lastBuildDate>Mon, 10 Feb 2025 20:53:53 +0100</lastBuildDate><image><url>https://nukesz.github.io/img/icon-192.png</url><title>docker</title><link>https://nukesz.github.io/tags/docker/</link></image><item><title>Dockerize a Spring Boot application</title><link>https://nukesz.github.io/post/dockerize-spring-boot/</link><pubDate>Mon, 10 Feb 2025 20:53:53 +0100</pubDate><guid>https://nukesz.github.io/post/dockerize-spring-boot/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this post, I&amp;rsquo;d like to present a few options to ship a spring boot application in a docker container. There are many ways to &lt;em>dockerize a spring boot&lt;/em> (probably a nice google hit search), but I don&amp;rsquo;t see too much discussion around the pros and cons. So let&amp;rsquo;s jump into it.&lt;/p>
&lt;h2 id="create-new-project">Create new project&lt;/h2>
&lt;p>Go to &lt;a href="https://start.spring.io/">https://start.spring.io/&lt;/a> and create a new project. I&amp;rsquo;ll be using:&lt;/p>
&lt;ul>
&lt;li>Gradle - Groovy&lt;/li>
&lt;li>Spring Boot 3.4.2&lt;/li>
&lt;li>Java 21&lt;/li>
&lt;li>Dependencies: Spring Web&lt;/li>
&lt;/ul>
&lt;p>For demonstration, I&amp;rsquo;m going to add a &amp;ldquo;/ping&amp;rdquo; endpoint and it&amp;rsquo;s going to return &amp;ldquo;pong&amp;rdquo;. Just simply create &lt;code>PingController.java&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">package&lt;/span> com.nukesz.demo&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.GetMapping&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.RestController&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PingController&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@GetMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/ping&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">ping&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Pong&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Build and run the application as a normal &lt;strong>jar&lt;/strong>:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># Build it&lt;/span>
./gradlew build
&lt;span style="color:#75715e"># Run it&lt;/span>
java -jar build/libs/dockerize-spring-boot-0.0.1-SNAPSHOT.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>The jar is actually created with the &lt;code>bootJar&lt;/code> task. You can learn more about it in the &lt;a href="https://docs.spring.io/spring-boot/docs/2.5.1/gradle-plugin/reference/htmlsingle/#packaging-executable.and-plain-archives">spring doc&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Verify our REST API is working as expected:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ curl http://localhost:8080/ping
&amp;gt; Pong!
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-dockerfile-manually">Create &lt;code>Dockerfile&lt;/code> manually&lt;/h2>
&lt;p>Our application is ready, so let&amp;rsquo;s create a docker image for it. First let&amp;rsquo;s&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">FROM eclipse-temurin:21
LABEL org.opencontainers.image.authors&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Norbert Benczur&amp;#34;&lt;/span>
RUN mkdir /opt/app
COPY build/libs/dockerize-spring-boot-*.jar /opt/app/myapp.jar
CMD &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;java&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;-jar&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;/opt/app/myapp.jar&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can build and run the Docker image:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">docker build -t dockerize-spring-boot .
docker run -it -p 8080:8080 --rm dockerize-spring-boot
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Verify that we can reach our REST API within the container as expected:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ curl http://localhost:8080/ping
&amp;gt; Pong!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Are we done? - Not at all.&lt;/p>
&lt;h3 id="whats-the-problem">What&amp;rsquo;s the problem?&lt;/h3>
&lt;p>Creating &lt;code>Dockerfile&lt;/code> manually has its pros and cons. It&amp;rsquo;s the most flexible solution where you control everything. No dependency needed.&lt;/p>
&lt;p>But I think the biggest drawback with this approach is that &lt;strong>it seems&lt;/strong> everything is working, but in fact it is hiding the underlining work that is missing. The problem comes when you need more than a &lt;code>Hello World&lt;/code> example.&lt;/p>
&lt;h4 id="repetitive">Repetitive&lt;/h4>
&lt;p>When you have more than 1 java app to dockerize, the number of dockerfiles starts to grow and you have to maintain and update each file independently.&lt;/p>
&lt;h4 id="efficiency">Efficiency&lt;/h4>
&lt;p>In this simple example, we defined our base image and started our &lt;em>fat jar&lt;/em>. But is that the most optimal way to build and run a spring boot (or any other java) application?
For example, let&amp;rsquo;s change a single file in our application and build the image again:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># Let&amp;#39;s measure the re-build&lt;/span>
$ time &lt;span style="color:#f92672">(&lt;/span> ./gradlew build -x test; docker build -t dockerize-spring-boot . &lt;span style="color:#f92672">)&lt;/span>
&amp;gt; ..
&amp;gt; &lt;span style="color:#f92672">=&lt;/span>&amp;gt; &lt;span style="color:#f92672">[&lt;/span>3/3&lt;span style="color:#f92672">]&lt;/span> COPY build/libs/dockerize-spring-boot-*.jar /opt/app/myapp.jar
&amp;gt; ..
&amp;gt; real 0m7,640s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>So even a single change could cause the jar to be re-built and copied again. We are obviously not using the benefits of docker layers.&lt;/p>
&lt;p>Can&amp;rsquo;t we leverage other people&amp;rsquo;s work rather than trying to come up with most optimal &lt;code>Dockerfile&lt;/code> ourself?&lt;/p>
&lt;h2 id="use-buildpacks">Use Buildpacks&lt;/h2>
&lt;p>Many of the problems that I mentioned previously comes from that the fact that we wrote our &lt;code>Dockerfile&lt;/code> manually. So let&amp;rsquo;s look another approach which does not need any Dockerfile at all.&lt;/p>
&lt;p>&lt;a href="https://buildpacks.io/">Buildpacks&lt;/a> transform the source code into containers without Dockerfiles. There are multiple projects that implements the Cloud Native Buildpacks (CNBs) &lt;a href="https://github.com/buildpacks/spec">spec&lt;/a> and probably best two options for java application today is:
&lt;a href="https://paketo.io/">Paketo&lt;/a> and &lt;a href="https://github.com/GoogleContainerTools/jib">Jib&lt;/a>.&lt;/p>
&lt;h3 id="paketo">Paketo&lt;/h3>
&lt;p>We can use paketo by executing the following gradle (or maven) task:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-gradle" data-lang="gradle">&lt;span style="color:#f92672">./&lt;/span>gradlew bootBuildImage
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The task will look and analyze your files, configurations and create a docker image based on it. The task&amp;rsquo;s output is really user friendly and show all the parameters that it used for building the image.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;gt; Task :bootBuildImage
Building image &lt;span style="color:#e6db74">&amp;#39;docker.io/library/dockerize-spring-boot:0.0.1-SNAPSHOT&amp;#39;&lt;/span>
&amp;gt; Pulling builder image &lt;span style="color:#e6db74">&amp;#39;docker.io/paketobuildpacks/builder-jammy-java-tiny:latest&amp;#39;&lt;/span>
&amp;gt; Pulled builder image &lt;span style="color:#e6db74">&amp;#39;paketobuildpacks/builder-jammy-java-tiny@sha256:c5c53&amp;#39;&lt;/span>
&amp;gt; Pulling run image &lt;span style="color:#e6db74">&amp;#39;docker.io/paketobuildpacks/run-jammy-tiny:latest&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> platform &lt;span style="color:#e6db74">&amp;#39;linux/amd64&amp;#39;&lt;/span>
&amp;gt; Pulled run image &lt;span style="color:#e6db74">&amp;#39;paketobuildpacks/run-jammy-tiny@sha256:0c5ac&amp;#39;&lt;/span>
&amp;gt; Executing lifecycle version v0.20.6
&amp;gt; Using build cache volume &lt;span style="color:#e6db74">&amp;#39;pack-cache-7b0feb92a365.build&amp;#39;&lt;/span>
&amp;gt; Running creator
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">===&lt;/span>&amp;gt; ANALYZING
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Image with name &lt;span style="color:#e6db74">&amp;#34;docker.io/library/dockerize-spring-boot:0.0.1-SNAPSHOT&amp;#34;&lt;/span> not found
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">===&lt;/span>&amp;gt; DETECTING
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> ...
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">===&lt;/span>&amp;gt; RESTORING
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">===&lt;/span>&amp;gt; BUILDING
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> ...
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Paketo Buildpack &lt;span style="color:#66d9ef">for&lt;/span> Spring Boot 5.32.1
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> https://github.com/paketo-buildpacks/spring-boot
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Build Configuration:
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> $BPL_JVM_CDS_ENABLED false whether to enable CDS optimizations at runtime
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> $BPL_SPRING_AOT_ENABLED false whether to enable Spring AOT at runtime
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> $BP_JVM_CDS_ENABLED false whether to enable CDS &amp;amp; perform JVM training run
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> $BP_SPRING_AOT_ENABLED false whether to enable Spring AOT
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> $BP_SPRING_CLOUD_BINDINGS_DISABLED false whether to contribute Spring Boot cloud bindings support
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> $BP_SPRING_CLOUD_BINDINGS_VERSION &lt;span style="color:#ae81ff">1&lt;/span> default version of Spring Cloud Bindings library to contribute
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Launch Configuration:
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> $BPL_SPRING_CLOUD_BINDINGS_DISABLED false whether to auto-configure Spring Boot environment properties from bindings
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> $BPL_SPRING_CLOUD_BINDINGS_ENABLED true Deprecated - whether to auto-configure Spring Boot environment properties from bindings
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Creating slices from layers index
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> dependencies &lt;span style="color:#f92672">(&lt;/span>19.5 MB&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> spring-boot-loader &lt;span style="color:#f92672">(&lt;/span>458.8 KB&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> snapshot-dependencies &lt;span style="color:#f92672">(&lt;/span>0.0 B&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> application &lt;span style="color:#f92672">(&lt;/span>35.9 KB&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Spring Cloud Bindings 2.0.4: Contributing to layer
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Downloading from https://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-bindings/2.0.4/spring-cloud-bindings-2.0.4.jar
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Verifying checksum
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Copying to /layers/paketo-buildpacks_spring-boot/spring-cloud-bindings
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Web Application Type: Contributing to layer
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Servlet web application detected
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Writing env.launch/BPL_JVM_THREAD_COUNT.default
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Launch Helper: Contributing to layer
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Creating /layers/paketo-buildpacks_spring-boot/helper/exec.d/spring-cloud-bindings
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span> application slices
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Image labels:
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> org.opencontainers.image.title
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> org.opencontainers.image.version
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> org.springframework.boot.version
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">===&lt;/span>&amp;gt; EXPORTING
&lt;span style="color:#f92672">[&lt;/span>creator&lt;span style="color:#f92672">]&lt;/span> Adding layer &lt;span style="color:#e6db74">&amp;#39;paketo-buildpacks/...
&lt;/span>&lt;span style="color:#e6db74"> [creator] ...
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">Successfully built image &amp;#39;&lt;/span>docker.io/library/dockerize-spring-boot:0.0.1-SNAPSHOT&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>
BUILD SUCCESSFUL in 1m 57s
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Let&amp;rsquo;s run and test our the newly created images as before:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">$ docker run -it -p 8080:8080 --rm dockerize-spring-boot:0.0.1-SNAPSHOT
$ curl http://localhost:8080/ping
&amp;gt; Pong!
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This already gives us a solid ground to build upon for production and uses all the best practices almost for free. For example we already could see two benefits:&lt;/p>
&lt;ul>
&lt;li>The size of the created docker image from the &amp;ldquo;manual&amp;rdquo; &lt;code>Dockerfile&lt;/code> is &lt;strong>468MB&lt;/strong> while the image created by paketo with default settings is &lt;strong>265MB&lt;/strong>.&lt;/li>
&lt;li>The docker layers are cached. When only the java source code is changed, we can see the following message: &lt;em>Reused 4/5 app layer(s)&lt;/em>. So we (Paketo) can optimize our build and rebuild only what&amp;rsquo;s actually necesseary.&lt;/li>
&lt;/ul>
&lt;p>For more information please have a look on the Spring doc &lt;a href="https://docs.spring.io/spring-boot/gradle-plugin/packaging-oci-image.html">Packaging OCI Images&lt;/a>.&lt;/p>
&lt;h3 id="jib">Jib&lt;/h3>
&lt;p>&lt;em>Coming soon&amp;hellip;&lt;/em>&lt;/p></description></item></channel></rss>